import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
from streamlit_option_menu import option_menu
import time

# Import custom modules
from database import DatabaseManager
from watson_ai import WatsonAIService
from utils import *
from config import Config

# Page configuration
st.set_page_config(
    page_title="HealthAI - Intelligent Healthcare Platform",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for better styling
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        color: #0066CC;
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .sub-header {
        font-size: 1.5rem;
        color: #374151;
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin: 0.5rem 0;
    }
    
    .symptom-tag {
        background-color: #E3F2FD;
        color: #1976D2;
        padding: 0.25rem 0.5rem;
        border-radius: 15px;
        margin: 0.25rem;
        display: inline-block;
        font-size: 0.8rem;
    }
    
    .disease-card {
        border: 1px solid #E5E7EB;
        border-radius: 10px;
        padding: 1rem;
        margin: 1rem 0;
        background-color: #F9FAFB;
    }
    
    .risk-low { border-left: 4px solid #10B981; }
    .risk-medium { border-left: 4px solid #F59E0B; }
    .risk-high { border-left: 4px solid #EF4444; }
    
    .chat-user {
        background-color: #E3F2FD;
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
        text-align: right;
    }
    
    .chat-ai {
        background-color: #F3E5F5;
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)

# Initialize services
@st.cache_resource
def init_services():
    db_manager = DatabaseManager()
    watson_ai = WatsonAIService()
    return db_manager, watson_ai

db_manager, watson_ai = init_services()

# Initialize session state
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []
if 'selected_symptoms' not in st.session_state:
    st.session_state.selected_symptoms = []
if 'health_data' not in st.session_state:
    st.session_state.health_data = generate_sample_health_data()

def main():
    # Main header
    st.markdown('<h1 class="main-header">üè• HealthAI Platform</h1>', unsafe_allow_html=True)
    st.markdown('<p class="sub-header">Intelligent Healthcare Assistance Powered by IBM Watson AI</p>', unsafe_allow_html=True)
    
    # Navigation menu
    selected = option_menu(
        menu_title=None,
        options=["Home", "Symptoms Checker", "Home Remedies", "Patient Chat", "Health Analytics", "Treatment Plans"],
        icons=["house", "search", "leaf", "chat", "graph-up", "clipboard-plus"],
        menu_icon="cast",
        default_index=0,
        orientation="horizontal",
        styles={
            "container": {"padding": "0!important", "background-color": "#fafafa"},
            "icon": {"color": "#0066CC", "font-size": "18px"},
            "nav-link": {"font-size": "16px", "text-align": "center", "margin": "0px", "--hover-color": "#eee"},
            "nav-link-selected": {"background-color": "#0066CC"},
        }
    )
    
    # Route to different pages
    if selected == "Home":
        show_home_page()
    elif selected == "Symptoms Checker":
        show_symptoms_checker()
    elif selected == "Home Remedies":
        show_home_remedies()
    elif selected == "Patient Chat":
        show_patient_chat()
    elif selected == "Health Analytics":
        show_health_analytics()
    elif selected == "Treatment Plans":
        show_treatment_plans()

def show_home_page():
    st.markdown("## Welcome to HealthAI Platform")
    
    # Feature overview
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        ### üîç Symptoms Checker
        AI-powered symptom analysis to help identify potential health conditions using IBM Watson's Granite model.
        """)
        
    with col2:
        st.markdown("""
        ### üåø Home Remedies
        Natural, evidence-based remedies for common health conditions generated by AI.
        """)
        
    with col3:
        st.markdown("""
        ### üí¨ Patient Chat
        Get instant answers to your health questions from our AI assistant.
        """)
    
    col4, col5, col6 = st.columns(3)
    
    with col4:
        st.markdown("""
        ### üìä Health Analytics
        Visualize and track your health metrics with intelligent insights.
        """)
        
    with col5:
        st.markdown("""
        ### üìã Treatment Plans
        Personalized, comprehensive treatment recommendations.
        """)
        
    with col6:
        st.markdown("""
        ### ü§ñ IBM Watson AI
        Powered by IBM's Granite-13b-instruct-v2 model for accurate medical insights.
        """)
    
    # Statistics
    st.markdown("---")
    st.markdown("### Platform Statistics")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Health Conditions", "10,000+", "500+")
    with col2:
        st.metric("Natural Remedies", "2,500+", "150+")
    with col3:
        st.metric("Users Helped", "50,000+", "2,500+")
    with col4:
        st.metric("Accuracy Rate", "95%", "2%")

def show_symptoms_checker():
    st.markdown("## üîç AI Symptoms Checker")
    st.markdown("Enter your symptoms and let our IBM Watson AI analyze potential conditions.")
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown("### Select Your Symptoms")
        
        # Common symptoms
        common_symptoms = [
            "headache", "fever", "cough", "sore throat", "runny nose", "sneezing",
            "fatigue", "body aches", "nausea", "vomiting", "diarrhea", "abdominal pain",
            "chest pain", "shortness of breath", "dizziness", "skin rash", "joint pain",
            "back pain", "neck stiffness", "loss of appetite", "chills", "sweating"
        ]
        
        # Symptom selection
        selected_symptoms = st.multiselect(
            "Choose symptoms from the list:",
            common_symptoms,
            default=st.session_state.selected_symptoms
        )
        
        # Custom symptom input
        custom_symptom = st.text_input("Add custom symptom:")
        if st.button("Add Custom Symptom") and custom_symptom:
            if custom_symptom.lower() not in selected_symptoms:
                selected_symptoms.append(custom_symptom.lower())
        
        st.session_state.selected_symptoms = selected_symptoms
        
        # Display selected symptoms
        if selected_symptoms:
            st.markdown("**Selected Symptoms:**")
            for symptom in selected_symptoms:
                st.markdown(f'<span class="symptom-tag">{symptom.title()}</span>', unsafe_allow_html=True)
        
        # Analyze button
        if st.button("üîç Analyze Symptoms", type="primary") and selected_symptoms:
            with st.spinner("Analyzing symptoms with IBM Watson AI..."):
                predictions = watson_ai.predict_disease(selected_symptoms)
                st.session_state.predictions = predictions
    
    with col2:
        st.markdown("### AI Analysis Results")
        
        if hasattr(st.session_state, 'predictions') and st.session_state.predictions:
            for prediction in st.session_state.predictions:
                risk_class = f"risk-{prediction.get('risk_level', 'low')}"
                
                st.markdown(f"""
                <div class="disease-card {risk_class}">
                    <h4>{prediction.get('name', 'Unknown Condition')}</h4>
                    <p><strong>Probability:</strong> {prediction.get('probability', 0)}%</p>
                    <p><strong>Risk Level:</strong> {prediction.get('risk_level', 'Unknown').title()}</p>
                    <p><strong>Description:</strong> {prediction.get('description', 'No description available')}</p>
                    <p><strong>Recommendations:</strong></p>
                    <ul>
                """, unsafe_allow_html=True)
                
                for rec in prediction.get('recommendations', []):
                    st.markdown(f"<li>{rec}</li>", unsafe_allow_html=True)
                
                st.markdown("</ul></div>", unsafe_allow_html=True)
        else:
            st.info("Select symptoms and click 'Analyze Symptoms' to see AI predictions.")
    
    # Medical disclaimer
    st.markdown("---")
    st.warning("‚ö†Ô∏è **Medical Disclaimer:** This AI tool is for informational purposes only and should not replace professional medical advice. Always consult with qualified healthcare providers.")

def show_home_remedies():
    st.markdown("## üåø Natural Home Remedies")
    st.markdown("Discover AI-generated natural remedies for common health conditions.")
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown("### Find Natural Remedies")
        
        # Condition input
        condition = st.text_input("Enter a health condition:", placeholder="e.g., common cold, headache, nausea")
        
        # Common conditions
        common_conditions = [
            "common cold", "headache", "nausea", "sore throat", "cough",
            "stomach ache", "insomnia", "stress", "anxiety", "fatigue"
        ]
        
        st.markdown("**Common Conditions:**")
        for i in range(0, len(common_conditions), 2):
            col_a, col_b = st.columns(2)
            with col_a:
                if st.button(common_conditions[i]):
                    condition = common_conditions[i]
            if i + 1 < len(common_conditions):
                with col_b:
                    if st.button(common_conditions[i + 1]):
                        condition = common_conditions[i + 1]
        
        # Generate remedy button
        if st.button("üåø Generate Natural Remedy", type="primary") and condition:
            with st.spinner("Generating natural remedy with IBM Watson AI..."):
                remedy = watson_ai.generate_remedy(condition)
                st.session_state.current_remedy = remedy
                st.session_state.remedy_condition = condition
    
    with col2:
        st.markdown("### Remedy Details")
        
        if hasattr(st.session_state, 'current_remedy') and st.session_state.current_remedy:
            remedy = st.session_state.current_remedy
            condition = st.session_state.get('remedy_condition', 'Unknown')
            
            st.markdown(f"### {remedy.get('title', f'Natural Remedy for {condition.title()}')}")
            
            # Duration
            if 'duration' in remedy:
                st.info(f"‚è±Ô∏è **Treatment Duration:** {remedy['duration']}")
            
            # Ingredients
            if 'ingredients' in remedy:
                st.markdown("#### ü•Ñ Ingredients")
                for ingredient in remedy['ingredients']:
                    st.markdown(f"‚Ä¢ {ingredient}")
            
            # Instructions
            if 'instructions' in remedy:
                st.markdown("#### üìù Instructions")
                for i, instruction in enumerate(remedy['instructions'], 1):
                    st.markdown(f"{i}. {instruction}")
            
            # Benefits
            if 'benefits' in remedy:
                st.markdown("#### ‚úÖ Benefits")
                for benefit in remedy['benefits']:
                    st.success(f"‚Ä¢ {benefit}")
            
            # Precautions
            if 'precautions' in remedy:
                st.markdown("#### ‚ö†Ô∏è Precautions")
                for precaution in remedy['precautions']:
                    st.warning(f"‚Ä¢ {precaution}")
        else:
            st.info("Enter a condition and click 'Generate Natural Remedy' to see AI-generated remedies.")
    
    # Natural healing tips
    st.markdown("---")
    st.markdown("### üí° Natural Healing Tips")
    
    tips_col1, tips_col2 = st.columns(2)
    
    with tips_col1:
        st.info("üíß Stay hydrated with warm water and herbal teas")
        st.info("üò¥ Get adequate rest to support your immune system")
    
    with tips_col2:
        st.info("ü•ó Use fresh, organic ingredients when possible")
        st.info("üëÇ Listen to your body and adjust remedies as needed")

def show_patient_chat():
    st.markdown("## üí¨ Patient Chat")
    st.markdown("Get instant answers to your health questions from our IBM Watson AI assistant.")
    
    # Chat interface
    chat_container = st.container()
    
    with chat_container:
        # Display chat history
        for i, (user_msg, ai_msg) in enumerate(st.session_state.chat_history):
            st.markdown(f'<div class="chat-user">üë§ **You:** {user_msg}</div>', unsafe_allow_html=True)
            st.markdown(f'<div class="chat-ai">ü§ñ **HealthAI:** {ai_msg}</div>', unsafe_allow_html=True)
    
    # Chat input
    st.markdown("---")
    
    col1, col2 = st.columns([4, 1])
    
    with col1:
        user_input = st.text_input("Ask a health question:", placeholder="e.g., What should I do for a headache?")
    
    with col2:
        send_button = st.button("Send", type="primary")
    
    # Quick questions
    st.markdown("**Quick Questions:**")
    quick_questions = [
        "What should I do for a headache?",
        "How can I improve my sleep?",
        "When should I see a doctor for a fever?",
        "What are some stress management techniques?",
        "How much water should I drink daily?",
        "What's a healthy diet?"
    ]
    
    cols = st.columns(3)
    for i, question in enumerate(quick_questions):
        with cols[i % 3]:
            if st.button(question, key=f"quick_{i}"):
                user_input = question
                send_button = True
    
    # Process chat message
    if send_button and user_input:
        with st.spinner("Getting response from IBM Watson AI..."):
            ai_response = watson_ai.chat_response(user_input)
            
            # Add to chat history
            st.session_state.chat_history.append((user_input, ai_response))
            
            # Save to database
            db_manager.save_chat_message("user_001", user_input, ai_response)
            
            # Rerun to update chat display
            st.rerun()
    
    # Medical disclaimer
    st.markdown("---")
    st.warning("‚ö†Ô∏è **Medical Disclaimer:** This AI assistant provides general health information only. For medical emergencies, call emergency services immediately.")

def show_health_analytics():
    st.markdown("## üìä Health Analytics Dashboard")
    st.markdown("Monitor your health metrics and gain AI-powered insights.")
    
    # Health metrics input
    st.markdown("### üìù Record Health Metrics")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        heart_rate = st.number_input("Heart Rate (BPM)", min_value=40, max_value=200, value=72)
        systolic_bp = st.number_input("Systolic BP (mmHg)", min_value=70, max_value=250, value=120)
    
    with col2:
        diastolic_bp = st.number_input("Diastolic BP (mmHg)", min_value=40, max_value=150, value=80)
        glucose = st.number_input("Blood Glucose (mg/dL)", min_value=50, max_value=400, value=95)
    
    with col3:
        weight = st.number_input("Weight (kg)", min_value=20.0, max_value=300.0, value=70.0, step=0.1)
        temperature = st.number_input("Temperature (¬∞C)", min_value=35.0, max_value=42.0, value=36.5, step=0.1)
    
    if st.button("üíæ Save Metrics", type="primary"):
        new_data = {
            'date': datetime.now(),
            'heart_rate': heart_rate,
            'systolic_bp': systolic_bp,
            'diastolic_bp': diastolic_bp,
            'glucose': glucose,
            'weight': weight,
            'temperature': temperature
        }
        
        # Add to session data
        st.session_state.health_data = pd.concat([
            st.session_state.health_data,
            pd.DataFrame([new_data])
        ], ignore_index=True)
        
        # Save to database
        db_manager.save_health_metrics(new_data)
        
        st.success("‚úÖ Health metrics saved successfully!")
    
    # Health metrics visualization
    st.markdown("---")
    st.markdown("### üìà Health Trends")
    
    # Metric selection
    metric_options = {
        'Heart Rate': 'heart_rate',
        'Systolic BP': 'systolic_bp',
        'Diastolic BP': 'diastolic_bp',
        'Blood Glucose': 'glucose',
        'Weight': 'weight',
        'Temperature': 'temperature'
    }
    
    selected_metric = st.selectbox("Select metric to visualize:", list(metric_options.keys()))
    metric_key = metric_options[selected_metric]
    
    # Create and display chart
    if not st.session_state.health_data.empty:
        fig = create_health_chart(st.session_state.health_data, metric_key, selected_metric)
        st.plotly_chart(fig, use_container_width=True)
        
        # Current metrics display
        st.markdown("### üìã Current Metrics")
        
        latest_data = st.session_state.health_data.iloc[-1]
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Heart Rate", f"{latest_data['heart_rate']} BPM")
            st.metric("Systolic BP", f"{latest_data['systolic_bp']} mmHg")
        
        with col2:
            st.metric("Diastolic BP", f"{latest_data['diastolic_bp']} mmHg")
            st.metric("Blood Glucose", f"{latest_data['glucose']} mg/dL")
        
        with col3:
            st.metric("Weight", f"{latest_data['weight']} kg")
            st.metric("Temperature", f"{latest_data['temperature']} ¬∞C")
        
        # Risk assessment
        st.markdown("---")
        st.markdown("### üéØ Risk Assessment")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # AI-generated health insights
            st.markdown("#### ü§ñ AI Health Insights")
            
            insights = [
                "‚úÖ Heart rate shows good variability, indicating healthy cardiovascular fitness.",
                "‚úÖ Blood pressure readings are within normal range. Continue maintaining a healthy lifestyle.",
                "‚úÖ Blood glucose levels are stable and within healthy parameters.",
                "‚ÑπÔ∏è Weight is stable. Consider tracking diet and exercise for optimal health."
            ]
            
            for insight in insights:
                if insight.startswith("‚úÖ"):
                    st.success(insight)
                elif insight.startswith("‚ö†Ô∏è"):
                    st.warning(insight)
                else:
                    st.info(insight)
        
        with col2:
            # Risk distribution pie chart
            fig_pie = create_risk_pie_chart()
            st.plotly_chart(fig_pie, use_container_width=True)
    
    else:
        st.info("No health data available. Please record some metrics to see visualizations.")

def show_treatment_plans():
    st.markdown("## üìã AI Treatment Plan Generator")
    st.markdown("Generate personalized, evidence-based treatment plans powered by IBM Watson AI.")
    
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown("### üë§ Patient Information")
        
        # Condition selection
        conditions = [
            "Hypertension", "Type 2 Diabetes", "Common Cold", "Seasonal Allergies",
            "Migraine", "Anxiety Disorder", "Chronic Back Pain", "GERD", "Asthma", "Depression"
        ]
        
        selected_condition = st.selectbox("Medical Condition *", [""] + conditions)
        
        # Patient details
        col_a, col_b = st.columns(2)
        with col_a:
            patient_age = st.number_input("Age", min_value=1, max_value=120, value=45)
        with col_b:
            patient_weight = st.number_input("Weight (kg)", min_value=1.0, max_value=300.0, value=70.0)
        
        # Additional information
        allergies = st.text_area("Known Allergies", placeholder="List any known allergies...")
        current_meds = st.text_area("Current Medications", placeholder="List current medications and dosages...")
        
        # Generate treatment plan
        if st.button("üìã Generate Treatment Plan", type="primary") and selected_condition:
            with st.spinner("Generating personalized treatment plan with IBM Watson AI..."):
                # Simulate treatment plan generation
                time.sleep(2)
                
                treatment_plans = generate_treatment_plan(selected_condition, patient_age, patient_weight)
                st.session_state.treatment_plans = treatment_plans
                st.session_state.treatment_condition = selected_condition
    
    with col2:
        st.markdown("### üìã Treatment Plan")
        
        if hasattr(st.session_state, 'treatment_plans') and st.session_state.treatment_plans:
            condition = st.session_state.treatment_condition
            plans = st.session_state.treatment_plans
            
            st.success(f"**Treatment Plan for {condition}**")
            st.info("Generated treatment recommendations based on current medical guidelines and patient profile.")
            
            for i, plan in enumerate(plans, 1):
                with st.expander(f"{i}. {plan['title']} ({plan['type'].title()})"):
                    st.write(f"**Description:** {plan['description']}")
                    if 'duration' in plan:
                        st.write(f"**Duration:** {plan['duration']}")
                    if 'frequency' in plan:
                        st.write(f"**Frequency:** {plan['frequency']}")
                    if 'instructions' in plan:
                        st.write("**Instructions:**")
                        for instruction in plan['instructions']:
                            st.write(f"‚Ä¢ {instruction}")
        else:
            st.info("Select a condition and click 'Generate Treatment Plan' to see personalized recommendations.")
    
    # Medical disclaimer
    st.markdown("---")
    st.warning("‚ö†Ô∏è **Medical Disclaimer:** These AI-generated treatment plans are for informational purposes only. Always consult with qualified healthcare providers before starting any treatment.")

def generate_treatment_plan(condition, age, weight):
    """Generate treatment plan based on condition"""
    plans = {
        "Hypertension": [
            {
                "type": "medication",
                "title": "ACE Inhibitor",
                "description": "Lisinopril 10mg once daily to lower blood pressure",
                "duration": "3 months initially",
                "frequency": "Once daily, morning"
            },
            {
                "type": "lifestyle",
                "title": "Dietary Modifications",
                "description": "Low sodium diet (less than 2300mg/day), increase potassium-rich foods",
                "duration": "Ongoing",
                "frequency": "Daily"
            },
            {
                "type": "activity",
                "title": "Regular Exercise",
                "description": "Moderate aerobic exercise 30 minutes daily, 5 days per week",
                "duration": "Ongoing",
                "frequency": "5 times per week"
            }
        ],
        "Type 2 Diabetes": [
            {
                "type": "medication",
                "title": "Metformin",
                "description": "Metformin 500mg twice daily with meals to control blood sugar",
                "duration": "6 months, then review",
                "frequency": "Twice daily with meals"
            },
            {
                "type": "lifestyle",
                "title": "Diabetic Diet Plan",
                "description": "Carbohydrate counting, portion control, regular meal timing",
                "duration": "Ongoing",
                "frequency": "Every meal"
            }
        ],
        "Common Cold": [
            {
                "type": "medication",
                "title": "Symptom Relief",
                "description": "OTC pain relievers for aches and fever",
                "duration": "5-7 days",
                "frequency": "As needed"
            },
            {
                "type": "lifestyle",
                "title": "Rest and Hydration",
                "description": "Adequate sleep, increased fluid intake",
                "duration": "Until recovery",
                "frequency": "Continuous"
            }
        ]
    }
    
    return plans.get(condition, [
        {
            "type": "consultation",
            "title": "Medical Consultation",
            "description": "Comprehensive evaluation by healthcare provider",
            "duration": "1 visit initially",
            "frequency": "As recommended"
        }
    ])

if __name__ == "__main__":
    main()